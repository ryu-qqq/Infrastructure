name: Terraform Apply and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'docker/**'
      - '.github/workflows/terraform-*.yml'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: atlantis

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.registry.outputs.registry }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform/atlantis
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/atlantis
        run: terraform apply -auto-approve

      - name: Get ECR Registry
        id: registry
        run: |
          REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "ECR Registry: ${REGISTRY}"

  build-and-push:
    name: Build and Push Docker Image
    needs: terraform-apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Image Tags
        id: meta
        run: |
          # Git commit SHA (short)
          GIT_SHA=$(git rev-parse --short HEAD)

          # Timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # ECR registry from previous job
          REGISTRY=${{ needs.terraform-apply.outputs.ecr_registry }}

          # Generate tags
          TAGS="${REGISTRY}/${{ env.ECR_REPOSITORY }}:${GIT_SHA}"
          TAGS="${TAGS},${REGISTRY}/${{ env.ECR_REPOSITORY }}:latest"
          TAGS="${TAGS},${REGISTRY}/${{ env.ECR_REPOSITORY }}:${TIMESTAMP}"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "git_sha=${GIT_SHA}" >> $GITHUB_OUTPUT

          echo "Generated tags:"
          echo "${TAGS}" | tr ',' '\n'

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.meta.outputs.git_sha }}

      - name: Image Scan Results
        run: |
          echo "üîç Waiting for ECR image scan to complete..."
          sleep 30

          # Get scan findings
          aws ecr describe-image-scan-findings \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-id imageTag=${{ steps.meta.outputs.git_sha }} \
            --region ${{ env.AWS_REGION }} \
            --output table || echo "Scan still in progress..."

      - name: Deployment Summary
        run: |
          cat << EOF
          ‚úÖ Deployment Complete!

          üì¶ Repository: ${{ env.ECR_REPOSITORY }}
          üè∑Ô∏è  Tags:
             - ${{ steps.meta.outputs.git_sha }} (git SHA)
             - latest
             - $(date +%Y%m%d-%H%M%S) (timestamp)

          üîó ECR URI: ${{ needs.terraform-apply.outputs.ecr_registry }}/${{ env.ECR_REPOSITORY }}

          üìã Next Steps:
          1. Review ECR scan results in AWS Console
          2. Update deployment manifests with new image tag
          3. Deploy to target environment
          EOF
