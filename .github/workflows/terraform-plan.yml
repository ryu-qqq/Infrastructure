name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
      # Exclude atlantis directory - managed by Atlantis server
      - '!terraform/atlantis/**'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent hanging workflows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        timeout-minutes: 2  # OIDC should complete quickly
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2
          role-duration-seconds: 3600  # 1 hour session
          role-session-name: GitHubActions-TerraformPlan

      - name: Run Governance Validators
        run: |
          echo "üîç Running governance validators..."
          chmod +x scripts/validators/*.sh

          # Run all validators
          ./scripts/validators/check-tags.sh
          ./scripts/validators/check-encryption.sh
          ./scripts/validators/check-naming.sh

          echo "‚úÖ All governance checks passed!"

      # Monitoring Module
      - name: Terraform Format Check - Monitoring
        working-directory: terraform/monitoring
        run: terraform fmt -check -recursive

      - name: Terraform Init - Monitoring
        working-directory: terraform/monitoring
        run: |
          terraform init \
            -backend-config="bucket=prod-connectly" \
            -backend-config="region=ap-northeast-2" \
            -backend-config="dynamodb_table=prod-connectly-tf-lock"

      - name: Terraform Validate - Monitoring
        working-directory: terraform/monitoring
        run: terraform validate

      - name: Terraform Plan - Monitoring
        id: plan-monitoring
        working-directory: terraform/monitoring
        run: |
          set +e
          terraform plan -no-color -out=tfplan
          PLAN_EXIT_CODE=$?
          terraform show -no-color tfplan > plan-monitoring.txt
          exit $PLAN_EXIT_CODE
        continue-on-error: true

      # Atlantis Module
      - name: Terraform Format Check - Atlantis
        working-directory: terraform/atlantis
        run: terraform fmt -check -recursive

      - name: Terraform Init - Atlantis
        working-directory: terraform/atlantis
        run: terraform init

      - name: Terraform Validate - Atlantis
        working-directory: terraform/atlantis
        run: terraform validate

      - name: Terraform Plan - Atlantis
        id: plan
        working-directory: terraform/atlantis
        run: |
          set +e
          terraform plan -no-color -out=tfplan
          PLAN_EXIT_CODE=$?
          terraform show -no-color tfplan > plan.txt
          exit $PLAN_EXIT_CODE
        continue-on-error: true

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read monitoring plan
            let monitoringPlan = '';
            try {
              monitoringPlan = fs.readFileSync('terraform/monitoring/plan-monitoring.txt', 'utf8');
            } catch (error) {
              monitoringPlan = 'No changes or error reading plan file.';
            }

            // Read atlantis plan
            let atlantisPlan = '';
            try {
              atlantisPlan = fs.readFileSync('terraform/atlantis/plan.txt', 'utf8');
            } catch (error) {
              atlantisPlan = 'No changes or error reading plan file.';
            }

            const output = `#### Terraform Plan üìã

            <details><summary>Monitoring Module Plan</summary>

            \`\`\`terraform
            ${monitoringPlan}
            \`\`\`

            </details>

            <details><summary>Atlantis Module Plan</summary>

            \`\`\`terraform
            ${atlantisPlan}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan-monitoring.outcome == 'failure' || steps.plan.outcome == 'failure'
        run: |
          echo "‚ùå Terraform plan failed"
          if [ "${{ steps.plan-monitoring.outcome }}" == "failure" ]; then
            echo "Monitoring module plan failed"
          fi
          if [ "${{ steps.plan.outcome }}" == "failure" ]; then
            echo "Atlantis module plan failed"
          fi
          exit 1
