name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
      # Exclude atlantis directory - managed by Atlantis server
      - '!terraform/atlantis/**'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent hanging workflows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Install Security Scanners
        run: |
          # Install tfsec via official installation script
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version

          # Install checkov via pip
          pip install checkov
          checkov --version

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        timeout-minutes: 2  # OIDC should complete quickly
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2
          role-duration-seconds: 3600  # 1 hour session
          role-session-name: GitHubActions-TerraformPlan

      - name: Run Governance Validators
        run: |
          echo "üîç Running governance validators..."
          chmod +x scripts/validators/*.sh

          # Run all validators
          ./scripts/validators/check-tags.sh
          ./scripts/validators/check-encryption.sh
          ./scripts/validators/check-naming.sh
          ./scripts/validators/check-tfsec.sh
          ./scripts/validators/check-checkov.sh

          echo "‚úÖ All governance checks passed!"

      # Monitoring Module
      - name: Terraform Format Check - Monitoring
        working-directory: terraform/monitoring
        run: terraform fmt -check -recursive

      - name: Terraform Init - Monitoring
        working-directory: terraform/monitoring
        run: |
          terraform init \
            -backend-config="bucket=prod-connectly" \
            -backend-config="region=ap-northeast-2" \
            -backend-config="dynamodb_table=prod-connectly-tf-lock"

      - name: Terraform Validate - Monitoring
        working-directory: terraform/monitoring
        run: terraform validate

      - name: Terraform Plan - Monitoring
        id: plan-monitoring
        working-directory: terraform/monitoring
        run: |
          set +e
          terraform plan -no-color -out=tfplan
          PLAN_EXIT_CODE=$?
          terraform show -no-color tfplan > plan-monitoring.txt
          exit $PLAN_EXIT_CODE
        continue-on-error: true

      - name: Generate Infracost Cost Estimate - Monitoring
        working-directory: terraform/monitoring
        run: |
          infracost breakdown \
            --path tfplan \
            --format json \
            --out-file infracost-monitoring.json

      # Atlantis Module
      - name: Terraform Format Check - Atlantis
        working-directory: terraform/atlantis
        run: terraform fmt -check -recursive

      - name: Terraform Init - Atlantis
        working-directory: terraform/atlantis
        run: terraform init

      - name: Terraform Validate - Atlantis
        working-directory: terraform/atlantis
        run: terraform validate

      - name: Terraform Plan - Atlantis
        id: plan
        working-directory: terraform/atlantis
        run: |
          set +e
          terraform plan -no-color -out=tfplan
          PLAN_EXIT_CODE=$?
          terraform show -no-color tfplan > plan.txt
          exit $PLAN_EXIT_CODE
        continue-on-error: true

      - name: Generate Infracost Cost Estimate - Atlantis
        working-directory: terraform/atlantis
        run: |
          infracost breakdown \
            --path tfplan \
            --format json \
            --out-file infracost-atlantis.json

      - name: Generate Infracost Diff
        run: |
          # Combine cost estimates from all modules
          infracost output \
            --path "terraform/*/infracost-*.json" \
            --format json \
            --out-file infracost-combined.json

      - name: Validate Cost Thresholds
        id: cost-validation
        run: |
          # Parse combined cost data
          TOTAL_MONTHLY_COST=$(jq -r '.totalMonthlyCost // 0' infracost-combined.json)
          PAST_MONTHLY_COST=$(jq -r '.pastTotalMonthlyCost // 0' infracost-combined.json)
          DIFF_MONTHLY_COST=$(jq -r '.diffTotalMonthlyCost // 0' infracost-combined.json)

          # Calculate percentage change
          if [ "$PAST_MONTHLY_COST" != "0" ] && [ "$PAST_MONTHLY_COST" != "null" ]; then
            PERCENT_CHANGE=$(echo "scale=2; ($DIFF_MONTHLY_COST / $PAST_MONTHLY_COST) * 100" | bc)
          else
            PERCENT_CHANGE=0
          fi

          echo "Monthly Cost: \$$TOTAL_MONTHLY_COST"
          echo "Previous Cost: \$$PAST_MONTHLY_COST"
          echo "Cost Difference: \$$DIFF_MONTHLY_COST ($PERCENT_CHANGE%)"

          # Check thresholds
          THRESHOLD_30=$(echo "$PERCENT_CHANGE >= 30" | bc)
          THRESHOLD_10=$(echo "$PERCENT_CHANGE >= 10" | bc)

          if [ "$THRESHOLD_30" -eq 1 ]; then
            echo "::error::Cost increase of $PERCENT_CHANGE% exceeds blocking threshold (30%)"
            echo "cost_status=blocked" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$THRESHOLD_10" -eq 1 ]; then
            echo "::warning::Cost increase of $PERCENT_CHANGE% exceeds warning threshold (10%)"
            echo "cost_status=warning" >> $GITHUB_OUTPUT
          else
            echo "cost_status=ok" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read monitoring plan
            let monitoringPlan = '';
            try {
              monitoringPlan = fs.readFileSync('terraform/monitoring/plan-monitoring.txt', 'utf8');
            } catch (error) {
              monitoringPlan = 'No changes or error reading plan file.';
            }

            // Read atlantis plan
            let atlantisPlan = '';
            try {
              atlantisPlan = fs.readFileSync('terraform/atlantis/plan.txt', 'utf8');
            } catch (error) {
              atlantisPlan = 'No changes or error reading plan file.';
            }

            // Read tfsec results
            let tfsecResults = '';
            try {
              const tfsecJson = JSON.parse(fs.readFileSync('tfsec-results.json', 'utf8'));
              const results = tfsecJson.results || [];

              if (results.length === 0) {
                tfsecResults = '‚úÖ No security issues found!';
              } else {
                const critical = results.filter(r => r.severity === 'CRITICAL').length;
                const high = results.filter(r => r.severity === 'HIGH').length;
                const medium = results.filter(r => r.severity === 'MEDIUM').length;
                const low = results.filter(r => r.severity === 'LOW').length;

                tfsecResults = `**Security Scan Summary:**\n`;
                if (critical > 0) tfsecResults += `üö® Critical: ${critical}\n`;
                if (high > 0) tfsecResults += `‚ùå High: ${high}\n`;
                if (medium > 0) tfsecResults += `‚ö†Ô∏è Medium: ${medium}\n`;
                if (low > 0) tfsecResults += `‚ÑπÔ∏è Low: ${low}\n`;

                if (critical + high > 0) {
                  tfsecResults += `\n‚ö†Ô∏è **Action Required:** Security issues must be resolved before merging.\n`;
                }
              }
            } catch (error) {
              tfsecResults = 'Security scan results not available.';
            }

            // Read checkov results
            let checkovResults = '';
            try {
              const checkovJson = JSON.parse(fs.readFileSync('checkov-results.json', 'utf8'));
              const summary = checkovJson.summary || {};

              const passed = summary.passed || 0;
              const failed = summary.failed || 0;
              const skipped = summary.skipped || 0;

              checkovResults = `**Policy Compliance Summary:**\n`;
              checkovResults += `‚úÖ Passed: ${passed}\n`;
              if (failed > 0) checkovResults += `‚ùå Failed: ${failed}\n`;
              if (skipped > 0) checkovResults += `‚äò Skipped: ${skipped}\n`;

              // Framework compliance
              const failedChecks = checkovJson.results?.failed_checks || [];
              const cisCount = failedChecks.filter(c => c.check_id && c.check_id.startsWith('CKV_AWS')).length;

              checkovResults += `\n**Compliance Frameworks:**\n`;
              checkovResults += cisCount === 0 ? `‚úÖ CIS AWS Benchmark\n` : `‚ö†Ô∏è CIS AWS: ${cisCount} issues\n`;

              if (failed > 0) {
                checkovResults += `\n‚ö†Ô∏è **Action Required:** Policy violations must be resolved.\n`;
              }
            } catch (error) {
              checkovResults = 'Policy compliance results not available.';
            }

            // Read Infracost results
            let costResults = '';
            try {
              const infracostJson = JSON.parse(fs.readFileSync('infracost-combined.json', 'utf8'));

              const totalMonthlyCost = infracostJson.totalMonthlyCost || 0;
              const pastMonthlyCost = infracostJson.pastTotalMonthlyCost || 0;
              const diffMonthlyCost = infracostJson.diffTotalMonthlyCost || 0;

              // Calculate percentage change
              let percentChange = 0;
              if (pastMonthlyCost > 0) {
                percentChange = ((diffMonthlyCost / pastMonthlyCost) * 100).toFixed(2);
              }

              costResults = `**Cost Impact Summary:**\n`;
              costResults += `üí∞ Current Monthly Cost: $${totalMonthlyCost.toFixed(2)}\n`;
              costResults += `üìä Previous Monthly Cost: $${pastMonthlyCost.toFixed(2)}\n`;

              if (diffMonthlyCost > 0) {
                costResults += `üìà Cost Increase: +$${diffMonthlyCost.toFixed(2)} (+${percentChange}%)\n`;
              } else if (diffMonthlyCost < 0) {
                costResults += `üìâ Cost Decrease: $${diffMonthlyCost.toFixed(2)} (${percentChange}%)\n`;
              } else {
                costResults += `‚û°Ô∏è No cost change\n`;
              }

              costResults += `\n**Cost Policy Status:**\n`;

              if (percentChange >= 30) {
                costResults += `üö´ **BLOCKED**: Cost increase exceeds 30% threshold\n`;
                costResults += `‚ö†Ô∏è **Action Required:** Review and justify cost increase before merging.\n`;
              } else if (percentChange >= 10) {
                costResults += `‚ö†Ô∏è **WARNING**: Cost increase exceeds 10% threshold\n`;
                costResults += `üìù Please review cost changes carefully.\n`;
              } else {
                costResults += `‚úÖ Within acceptable cost thresholds\n`;
              }

              // Add project breakdown if available
              if (infracostJson.projects && infracostJson.projects.length > 0) {
                costResults += `\n**Module Breakdown:**\n`;
                infracostJson.projects.forEach(project => {
                  const projCost = project.breakdown?.totalMonthlyCost || 0;
                  const projDiff = project.diff?.totalMonthlyCost || 0;
                  costResults += `- ${project.name}: $${projCost.toFixed(2)}`;
                  if (projDiff !== 0) {
                    costResults += ` (${projDiff > 0 ? '+' : ''}$${projDiff.toFixed(2)})`;
                  }
                  costResults += `\n`;
                });
              }
            } catch (error) {
              costResults = 'Cost analysis results not available.';
            }

            const output = `#### Terraform Plan üìã

            <details><summary>üõ°Ô∏è Security Scan (tfsec)</summary>

            ${tfsecResults}

            </details>

            <details><summary>üîê Policy Compliance (checkov)</summary>

            ${checkovResults}

            </details>

            <details><summary>üí∞ Cost Impact (Infracost)</summary>

            ${costResults}

            </details>

            <details><summary>Monitoring Module Plan</summary>

            \`\`\`terraform
            ${monitoringPlan}
            \`\`\`

            </details>

            <details><summary>Atlantis Module Plan</summary>

            \`\`\`terraform
            ${atlantisPlan}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan-monitoring.outcome == 'failure' || steps.plan.outcome == 'failure'
        run: |
          echo "‚ùå Terraform plan failed"
          if [ "${{ steps.plan-monitoring.outcome }}" == "failure" ]; then
            echo "Monitoring module plan failed"
          fi
          if [ "${{ steps.plan.outcome }}" == "failure" ]; then
            echo "Atlantis module plan failed"
          fi
          exit 1
