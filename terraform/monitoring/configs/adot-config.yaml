# AWS Distro for OpenTelemetry (ADOT) Collector Configuration
# This configuration is used as a sidecar container in ECS tasks
# to collect metrics and send them to Amazon Managed Prometheus

# Receivers define how to collect metrics
receivers:
  # Prometheus receiver scrapes metrics from application endpoints
  prometheus:
    config:
      global:
        scrape_interval: 30s
        scrape_timeout: 10s

      scrape_configs:
        # Scrape metrics from the application container
        - job_name: 'application-metrics'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8080']  # Adjust port based on your application
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '(http_.*|application_.*|business_.*)'
              action: keep

        # Scrape ADOT Collector's own metrics (optional)
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'otelcol_.*'
              action: keep

  # AWS ECS Container Metrics receiver
  awsecscontainermetrics:
    collection_interval: 30s

# Processors transform metrics before export
processors:
  # Batch processor groups metrics before export
  batch:
    timeout: 60s
    send_batch_size: 1000

  # Memory limiter prevents OOM by limiting memory usage
  memory_limiter:
    check_interval: 5s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource processor adds resource attributes
  resource:
    attributes:
      - key: environment
        value: prod
        action: upsert
      - key: cluster_name
        value: atlantis-prod
        action: upsert
      - key: service_name
        value: ${SERVICE_NAME}  # Set via environment variable
        action: upsert

  # Metricstransform processor renames or filters metrics
  metricstransform:
    transforms:
      # Add ECS-specific labels
      - include: .*
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: platform
            new_value: ecs

# Exporters define where to send metrics
exporters:
  # Prometheus Remote Write exporter for AMP
  prometheusremotewrite:
    endpoint: ${AMP_ENDPOINT}  # Set via environment variable
    auth:
      authenticator: sigv4auth
    resource_to_telemetry_conversion:
      enabled: true
    # Retry configuration
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    # Queue configuration
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000

  # Logging exporter for debugging (optional, can be removed in production)
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

# Extensions provide additional capabilities
extensions:
  # SigV4 authenticator for AWS services
  sigv4auth:
    region: ${AWS_REGION}  # Set via environment variable
    service: aps
    # Role ARN is assumed by the ECS task role automatically

  # Health check extension
  health_check:
    endpoint: :13133

  # Performance profiler (optional, for debugging)
  pprof:
    endpoint: :1777

  # zPages extension (optional, for debugging)
  zpages:
    endpoint: :55679

# Service defines the telemetry pipeline
service:
  # Extensions to enable
  extensions:
    - sigv4auth
    - health_check
    - pprof
    - zpages

  # Telemetry configuration for the collector itself
  telemetry:
    logs:
      level: info
      encoding: json
    metrics:
      level: detailed
      address: :8888

  # Pipeline configuration
  pipelines:
    # Metrics pipeline
    metrics:
      receivers:
        - prometheus
        - awsecscontainermetrics
      processors:
        - memory_limiter
        - resource
        - metricstransform
        - batch
      exporters:
        - prometheusremotewrite
        - logging
