# {{ service_name | upper }} - ElastiCache Redis

Generated by Infrastructure Wizard on {{ generation_time }}

## Overview

ElastiCache Redis cluster for {{ service_name }} with {% if automatic_failover %}Multi-AZ automatic failover{% else %}single-node deployment{% endif %}.

## Resources Created

- Redis {% if automatic_failover %}Replication Group{% else %}Cache Cluster{% endif %}
- Subnet group (private subnets)
- Security group (port 6379)
- Parameter group (Redis 7)
- CloudWatch log groups (slow-log, engine-log)
- CloudWatch alarms (CPU, memory)
- SSM parameters (endpoint, port)

## Configuration

- **Node Type**: {{ node_type }}
- **Number of Nodes**: {{ num_cache_nodes }}
- **Engine Version**: Redis 7.0
- **Environment**: {{ environment }}
- **Region**: {{ aws_region }}
{% if automatic_failover %}- **Multi-AZ**: Enabled
- **Automatic Failover**: Enabled{% else %}- **Multi-AZ**: Disabled{% endif %}
- **Snapshot Retention**: {{ snapshot_retention | default(7) }} days
- **Encryption at Rest**: {% if automatic_failover %}Enabled{% else %}Not available in single-node{% endif %}
- **Encryption in Transit**: {% if automatic_failover %}Enabled{% else %}Not available in single-node{% endif %}

## Security Features

- 🔒 Encryption at rest{% if automatic_failover %} (enabled){% endif %}
- 🔐 Encryption in transit{% if automatic_failover %} (enabled){% endif %}
- 🛡️ VPC isolation (private subnets only)
- 🚪 Security group rules (app tier access only)
{% if automatic_failover %}- 🔑 Auth token enabled{% endif %}
- 📝 CloudWatch logging (slow-log, engine-log)

## Connection Information

### Endpoint

{% if automatic_failover %}
**Primary Endpoint** (read/write):
```
{{ service_name }}-redis-{{ environment }}.xxxxxx.{{ aws_region }}.cache.amazonaws.com:6379
```

**Reader Endpoint** (read-only):
```
{{ service_name }}-redis-{{ environment }}-ro.xxxxxx.{{ aws_region }}.cache.amazonaws.com:6379
```
{% else %}
**Endpoint**:
```
{{ service_name }}-redis-{{ environment }}.xxxxxx.{{ aws_region }}.cache.amazonaws.com:6379
```
{% endif %}

### Retrieve from SSM

```bash
REDIS_ENDPOINT=$(aws ssm get-parameter --name "/{{ service_name }}/{{ environment }}/redis/endpoint" --query "Parameter.Value" --output text)
REDIS_PORT=$(aws ssm get-parameter --name "/{{ service_name }}/{{ environment }}/redis/port" --query "Parameter.Value" --output text)

echo "redis://$REDIS_ENDPOINT:$REDIS_PORT"
```

## Usage Examples

### Node.js (ioredis)

```javascript
const Redis = require('ioredis');

const redis = new Redis({
  host: process.env.REDIS_ENDPOINT,
  port: process.env.REDIS_PORT,
{% if automatic_failover %}  tls: {},
  password: process.env.REDIS_AUTH_TOKEN,
{% endif %}  retryStrategy: (times) => Math.min(times * 50, 2000),
});

// Set value
await redis.set('key', 'value', 'EX', 3600);

// Get value
const value = await redis.get('key');
```

### Python (redis-py)

```python
import redis
import os

r = redis.Redis(
    host=os.getenv('REDIS_ENDPOINT'),
    port=int(os.getenv('REDIS_PORT')),
{% if automatic_failover %}    ssl=True,
    password=os.getenv('REDIS_AUTH_TOKEN'),
{% endif %}    decode_responses=True,
    socket_connect_timeout=5,
    socket_keepalive=True,
)

# Set value with expiration
r.setex('key', 3600, 'value')

# Get value
value = r.get('key')
```

### Go (go-redis)

```go
import (
    "github.com/go-redis/redis/v8"
    "context"
    "time"
)

rdb := redis.NewClient(&redis.Options{
    Addr:     os.Getenv("REDIS_ENDPOINT") + ":" + os.Getenv("REDIS_PORT"),
{% if automatic_failover %}    TLSConfig: &tls.Config{},
    Password:  os.Getenv("REDIS_AUTH_TOKEN"),
{% endif %}    PoolSize:     10,
    DialTimeout:  5 * time.Second,
})

// Set value
err := rdb.Set(ctx, "key", "value", 3600*time.Second).Err()

// Get value
val, err := rdb.Get(ctx, "key").Result()
```

## Monitoring

### CloudWatch Logs

- **Slow Log**: `/aws/elasticache/{{ service_name }}-redis-{{ environment }}/slow-log`
- **Engine Log**: `/aws/elasticache/{{ service_name }}-redis-{{ environment }}/engine-log`

```bash
# Tail slow log
aws logs tail /aws/elasticache/{{ service_name }}-redis-{{ environment }}/slow-log --follow

# Tail engine log
aws logs tail /aws/elasticache/{{ service_name }}-redis-{{ environment }}/engine-log --follow
```

### CloudWatch Alarms

- **CPU Utilization**: Alarm when > 75% for 10 minutes
- **Memory Utilization**: Alarm when > 80% for 10 minutes

### Key Metrics to Monitor

```bash
# CPU Utilization
aws cloudwatch get-metric-statistics \
  --namespace AWS/ElastiCache \
{% if automatic_failover %}  --dimensions Name=ReplicationGroupId,Value={{ service_name }}-redis-{{ environment }} \
{% else %}  --dimensions Name=CacheClusterId,Value={{ service_name }}-redis-{{ environment }} \
{% endif %}  --metric-name CPUUtilization \
  --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
  --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
  --period 300 \
  --statistics Average

# Memory Usage
aws cloudwatch get-metric-statistics \
  --namespace AWS/ElastiCache \
{% if automatic_failover %}  --dimensions Name=ReplicationGroupId,Value={{ service_name }}-redis-{{ environment }} \
{% else %}  --dimensions Name=CacheClusterId,Value={{ service_name }}-redis-{{ environment }} \
{% endif %}  --metric-name DatabaseMemoryUsagePercentage \
  --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
  --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
  --period 300 \
  --statistics Average
```

## Maintenance

### Snapshot Management

Automatic snapshots are taken daily during the snapshot window (03:00-05:00 UTC) and retained for {{ snapshot_retention | default(7) }} days.

### Maintenance Window

System maintenance occurs on Sundays 05:00-07:00 UTC.

### Manual Snapshot

```bash
{% if automatic_failover %}
aws elasticache create-snapshot \
  --replication-group-id {{ service_name }}-redis-{{ environment }} \
  --snapshot-name {{ service_name }}-manual-$(date +%Y%m%d-%H%M%S)
{% else %}
aws elasticache create-snapshot \
  --cache-cluster-id {{ service_name }}-redis-{{ environment }} \
  --snapshot-name {{ service_name }}-manual-$(date +%Y%m%d-%H%M%S)
{% endif %}
```

## Deployment

1. Initialize Terraform: `terraform init`
2. Plan changes: `terraform plan`
3. Apply: `terraform apply`

## Troubleshooting

### Connection Issues

1. Check security group rules
2. Verify subnet configuration
3. Test from application server:

```bash
# Install redis-cli
sudo apt-get install redis-tools

# Test connection
redis-cli -h $REDIS_ENDPOINT -p $REDIS_PORT {% if automatic_failover %}--tls --askpass{% endif %} ping
```

### Performance Issues

1. Monitor CPU and memory metrics
2. Review slow log for expensive operations
3. Consider scaling up node type or adding replicas

---

🤖 Generated with Infrastructure Wizard
