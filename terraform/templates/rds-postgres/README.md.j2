# {{ service_name | upper }} - RDS PostgreSQL Database

Generated by Infrastructure Wizard on {{ generation_time }}

## Overview

This Terraform configuration creates an RDS PostgreSQL database instance for {{ service_name }}.

## Resources Created

- RDS PostgreSQL {{ engine_version | default('15.4') }} instance
- DB subnet group
- Security group for database access
- Secrets Manager secret for database password
- SSM parameters for connection info

## Configuration

### Instance Details
- **Instance Class**: {{ instance_class | default('db.t3.micro') }}
- **Allocated Storage**: {{ allocated_storage | default(20) }} GB
- **Multi-AZ**: {% if multi_az is defined %}{{ multi_az }}{% else %}Enabled{% endif %}
- **Storage Encryption**: {% if storage_encrypted is defined %}{{ storage_encrypted }}{% else %}Enabled{% endif %}

### Backup Configuration
- **Backup Retention**: {{ backup_retention | default(7) }} days
- **Backup Window**: 03:00-04:00 UTC
- **Maintenance Window**: Monday 04:00-05:00 UTC

### Monitoring
- **Performance Insights**: {% if performance_insights is defined %}{{ performance_insights }}{% else %}Enabled{% endif %}
- **CloudWatch Logs**: PostgreSQL, Upgrade logs enabled
- **Enhanced Monitoring**: 60 second interval

## Database Credentials

**Username**: Stored in SSM Parameter Store at `/${local.name_prefix}/rds/username`
**Password**: Stored in AWS Secrets Manager (auto-generated 32 character password)

## Connection Information

Access connection details from SSM Parameter Store:

```bash
# Get database endpoint
aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/endpoint" --query 'Parameter.Value' --output text

# Get database name
aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/database-name" --query 'Parameter.Value' --output text

# Get database password from Secrets Manager
aws secretsmanager get-secret-value --secret-id {{ service_name }}-{{ environment }}-db-password --query 'SecretString' --output text
```

## Usage

### Initialize Terraform

```bash
terraform init
```

### Plan Changes

```bash
terraform plan
```

### Apply Changes

```bash
terraform apply
```

## Security Features

- âœ… Storage encryption using KMS
- âœ… Secrets Manager for password storage
- âœ… Restricted security group access
- âœ… Private subnet placement
- âœ… SSL/TLS connections enforced
- âœ… Automated backups enabled

## Monitoring

CloudWatch metrics are automatically collected:
- CPU utilization
- Database connections
- Free storage space
- Read/Write IOPS
- Database latency

## Backup and Recovery

- Automated daily backups
- {{ backup_retention | default(7) }}-day retention period
- Point-in-time recovery enabled
- Final snapshot on deletion

## Cost Optimization

- Right-sized instance class
- GP3 storage for cost-efficiency
- Automated storage scaling
- Reserved Instance compatible

## Tags

All resources are tagged with:
- Service: {{ service_name }}
- Environment: {{ environment }}
- ManagedBy: Terraform
- Owner: platform-team
- CostCenter: engineering

## Next Steps

1. Verify database connectivity from application
2. Configure database users and permissions
3. Set up monitoring alerts
4. Review and adjust parameter group settings
5. Configure application connection pooling

## Support

For issues or questions, contact the platform team.

---

ðŸ¤– Generated with Infrastructure Wizard
