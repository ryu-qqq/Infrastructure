# ============================================================================
# {{ service_name | upper }} - RDS MySQL Database
# ============================================================================
# Generated by Infrastructure Wizard
# Service: {{ service_name }}
# Environment: {{ environment }}
# ============================================================================

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "{{ aws_region }}"
}

variable "environment" {
  description = "Environment (dev/staging/prod)"
  type        = string
  default     = "{{ environment }}"
}

variable "service_name" {
  description = "Service name"
  type        = string
  default     = "{{ service_name }}"
}

# DB Subnet Group
resource "aws_db_subnet_group" "{{ service_name | replace('-', '_') }}" {
  name       = "${local.name_prefix}-db-subnet"
  subnet_ids = data.aws_subnets.database.ids

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-db-subnet"
      Component = "database"
    }
  )
}

# Security Group for RDS
resource "aws_security_group" "{{ service_name | replace('-', '_') }}_rds" {
  name_prefix = "${local.name_prefix}-rds-"
  description = "Security group for {{ service_name }} RDS instance"
  vpc_id      = data.aws_vpc.main.id

  ingress {
    description     = "MySQL from application"
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [data.aws_security_group.database_access.id]
  }

  egress {
    description = "Allow all outbound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-rds-sg"
      Component = "security"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}

# Random password for DB
resource "random_password" "db_password" {
  length  = 32
  special = true
}

# Store password in Secrets Manager
resource "aws_secretsmanager_secret" "db_password" {
  name_prefix             = "${local.name_prefix}-db-password-"
  description             = "Database password for {{ service_name }}"
  recovery_window_in_days = 7
  kms_key_id              = data.aws_kms_key.rds.arn

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-db-password"
      Component = "secrets"
    }
  )
}

resource "aws_secretsmanager_secret_version" "db_password" {
  secret_id     = aws_secretsmanager_secret.db_password.id
  secret_string = random_password.db_password.result
}

# RDS MySQL Instance
module "{{ service_name | replace('-', '_') }}_rds" {
  source = "../../modules/rds"

  identifier = "${local.name_prefix}-mysql"

  # Engine configuration
  engine         = "mysql"
  engine_version = "8.0.35"
  instance_class = "{{ instance_class | default('db.t3.micro') }}"

  # Storage configuration
  allocated_storage     = {{ allocated_storage | default(20) }}
  max_allocated_storage = {{ allocated_storage | default(20) * 3 }}
  storage_type          = "gp3"
  storage_encrypted     = {% if storage_encrypted is defined %}{{ storage_encrypted | lower }}{% else %}true{% endif %}
  kms_key_id            = data.aws_kms_key.rds.arn

  # Database configuration
  db_name  = local.db_name
  username = local.db_username
  password = random_password.db_password.result
  port     = 3306

  # Network configuration
  db_subnet_group_name   = aws_db_subnet_group.{{ service_name | replace('-', '_') }}.name
  vpc_security_group_ids = [aws_security_group.{{ service_name | replace('-', '_') }}_rds.id]
  publicly_accessible    = false

  # High Availability
  multi_az = {% if multi_az is defined %}{{ multi_az | lower }}{% else %}true{% endif %}

  # Backup configuration
  backup_retention_period = {{ backup_retention | default(7) }}
  backup_window           = "03:00-04:00"
  maintenance_window      = "mon:04:00-mon:05:00"
  skip_final_snapshot     = false
  final_snapshot_identifier = "${local.name_prefix}-final-snapshot"

  # Monitoring
  enabled_cloudwatch_logs_exports = ["error", "general", "slowquery"]
  performance_insights_enabled    = {% if performance_insights is defined %}{{ performance_insights | lower }}{% else %}true{% endif %}
  monitoring_interval             = 60

  # Parameter group
  parameter_group_family = "mysql8.0"

  tags = local.required_tags
}

# Store connection info in SSM Parameter Store
resource "aws_ssm_parameter" "db_endpoint" {
  name        = "/${local.name_prefix}/rds/endpoint"
  description = "RDS endpoint for {{ service_name }}"
  type        = "String"
  value       = module.{{ service_name | replace('-', '_') }}_rds.endpoint

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-db-endpoint"
      Component = "parameters"
    }
  )
}

resource "aws_ssm_parameter" "db_name" {
  name        = "/${local.name_prefix}/rds/database-name"
  description = "Database name for {{ service_name }}"
  type        = "String"
  value       = local.db_name

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-db-name"
      Component = "parameters"
    }
  )
}

resource "aws_ssm_parameter" "db_username" {
  name        = "/${local.name_prefix}/rds/username"
  description = "Database username for {{ service_name }}"
  type        = "SecureString"
  value       = local.db_username
  kms_key_id  = data.aws_kms_key.rds.arn

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-db-username"
      Component = "parameters"
    }
  )
}
