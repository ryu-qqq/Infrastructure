# ============================================================================
# {{ service_name | upper }} - ECS Service
# ============================================================================
# Generated by Infrastructure Wizard
# Service: {{ service_name }}
# Environment: {{ environment }}
# ============================================================================

# CloudWatch Log Group
module "{{ service_name | replace('-', '_') }}_logs" {
  source = "../../modules/cloudwatch-log-group"

  name              = local.log_group_name
  retention_in_days = local.log_retention_days
  kms_key_id        = data.aws_kms_key.cloudwatch_logs.arn

  tags = merge(
    local.required_tags,
    {
      Name      = "logs-${local.name_prefix}"
      Component = "logging"
    }
  )
}

# Security Group for ECS Tasks
resource "aws_security_group" "{{ service_name | replace('-', '_') }}" {
  name_prefix = "${local.name_prefix}-ecs-"
  description = "Security group for {{ service_name }} ECS tasks"
  vpc_id      = local.vpc_id

  # Egress: Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }

  {% if include_alb %}
  # Ingress: Allow traffic from ALB
  ingress {
    from_port       = local.container_port
    to_port         = local.container_port
    protocol        = "tcp"
    security_groups = [aws_security_group.{{ service_name | replace('-', '_') }}_alb.id]
    description     = "Allow traffic from ALB"
  }
  {% else %}
  # Ingress: Allow traffic from VPC (no ALB)
  ingress {
    from_port   = local.container_port
    to_port     = local.container_port
    protocol    = "tcp"
    cidr_blocks = [data.aws_vpc.main.cidr_block]
    description = "Allow traffic from VPC"
  }
  {% endif %}

  tags = merge(
    local.required_tags,
    {
      Name      = "sg-${local.name_prefix}-ecs"
      Component = "security"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}

# ECS Service
module "{{ service_name | replace('-', '_') }}_service" {
  source = "../../modules/ecs-service"

  # Service Configuration
  service_name   = local.service_name
  environment    = local.environment
  cpu            = {{ cpu }}
  memory         = {{ memory }}
  desired_count  = {{ desired_count }}

  # Container Configuration
  container_name = local.container_name
  container_port = local.container_port
  container_image = "{{ container_image | default('nginx:latest') }}"

  # Network Configuration
  vpc_id             = local.vpc_id
  private_subnet_ids = local.private_subnet_ids
  security_group_ids = [aws_security_group.{{ service_name | replace('-', '_') }}.id]

  # Logging Configuration
  log_group_name  = module.{{ service_name | replace('-', '_') }}_logs.name
  log_region      = "ap-northeast-2"

  {% if include_alb %}
  # Load Balancer Configuration
  target_group_arn = module.{{ service_name | replace('-', '_') }}_alb.target_group_arn
  {% endif %}

  # Health Check
  health_check_path = "{{ health_check_path }}"

  # Environment Variables
  environment_variables = {
    ENVIRONMENT = local.environment
    SERVICE_NAME = local.service_name
    {% if database == "shared-rds" %}
    DB_HOST = local.db_address
    DB_PORT = local.db_port
    {% endif %}
    {% if cache == "shared-elasticache" %}
    REDIS_ENDPOINT = local.redis_endpoint
    {% endif %}
  }

  # Secrets (injected at runtime)
  secrets = {
    {% if database == "shared-rds" %}
    DB_PASSWORD = data.aws_ssm_parameter.master_password_secret_name.value
    {% endif %}
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "ecs-${local.name_prefix}"
      Component = "compute"
    }
  )

  depends_on = [
    module.{{ service_name | replace('-', '_') }}_logs
  ]
}
