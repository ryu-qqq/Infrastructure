# ============================================================================
# {{ service_name | upper }} - ECS Service
# ============================================================================
# Generated by Infrastructure Wizard
# Service: {{ service_name }}
# Environment: {{ environment }}
# ============================================================================

# CloudWatch Log Group
module "{{ service_name | replace('-', '_') }}_logs" {
  source = "../../modules/cloudwatch-log-group"

  name              = local.log_group_name
  retention_in_days = local.log_retention_days
  kms_key_id        = data.aws_kms_key.cloudwatch_logs.arn

  # Required tags
  environment = local.environment
  service     = local.service_name
  team        = "platform-team"
  owner       = "platform-team@example.com"
  cost_center = "engineering"
  project     = "{{ service_name }}"
}

# Security Group for ECS Tasks
resource "aws_security_group" "{{ service_name | replace('-', '_') }}" {
  name_prefix = "${local.name_prefix}-ecs-"
  description = "Security group for {{ service_name }} ECS tasks"
  vpc_id      = local.vpc_id

  # Egress: Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }

  {% if include_alb %}
  # Ingress: Allow traffic from ALB
  ingress {
    from_port       = local.container_port
    to_port         = local.container_port
    protocol        = "tcp"
    security_groups = [aws_security_group.{{ service_name | replace('-', '_') }}_alb.id]
    description     = "Allow traffic from ALB"
  }
  {% else %}
  # Ingress: Allow traffic from VPC (no ALB)
  ingress {
    from_port   = local.container_port
    to_port     = local.container_port
    protocol    = "tcp"
    cidr_blocks = [data.aws_vpc.main.cidr_block]
    description = "Allow traffic from VPC"
  }
  {% endif %}

  tags = merge(
    local.required_tags,
    {
      Name      = "sg-${local.name_prefix}-ecs"
      Component = "security"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}

# IAM Role for ECS Task Execution
resource "aws_iam_role" "{{ service_name | replace('-', '_') }}_execution_role" {
  name = "${local.name_prefix}-ecs-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })

  tags = local.required_tags
}

resource "aws_iam_role_policy_attachment" "{{ service_name | replace('-', '_') }}_execution_role_policy" {
  role       = aws_iam_role.{{ service_name | replace('-', '_') }}_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# IAM Role for ECS Task
resource "aws_iam_role" "{{ service_name | replace('-', '_') }}_task_role" {
  name = "${local.name_prefix}-ecs-task-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })

  tags = local.required_tags
}

# ECS Service
module "{{ service_name | replace('-', '_') }}_service" {
  source = "../../modules/ecs-service"

  # Required variables
  name               = local.service_name
  cluster_id         = local.ecs_cluster_id
  container_name     = local.container_name
  container_port     = local.container_port
  container_image    = "{{ container_image | default('nginx:latest') }}"
  cpu                = {{ cpu }}
  memory             = {{ memory }}
  desired_count      = {{ desired_count }}
  execution_role_arn = aws_iam_role.{{ service_name | replace('-', '_') }}_execution_role.arn
  task_role_arn      = aws_iam_role.{{ service_name | replace('-', '_') }}_task_role.arn
  subnet_ids         = local.private_subnet_ids
  common_tags        = local.required_tags

  # Security groups
  security_group_ids = [aws_security_group.{{ service_name | replace('-', '_') }}.id]

  # CloudWatch Logs
  log_configuration = {
    log_driver = "awslogs"
    options = {
      "awslogs-group"         = module.{{ service_name | replace('-', '_') }}_logs.name
      "awslogs-region"        = "{{ aws_region }}"
      "awslogs-stream-prefix" = "ecs"
    }
  }

  {% if include_alb %}
  # Load Balancer Configuration
  load_balancer = {
    target_group_arn = module.{{ service_name | replace('-', '_') }}_alb.target_group_arns["{{ service_name | replace('-', '_') }}"]
    container_name   = local.container_name
    container_port   = local.container_port
  }
  {% endif %}

  # Environment Variables
  container_environment = [
    {
      name  = "ENVIRONMENT"
      value = local.environment
    },
    {
      name  = "SERVICE_NAME"
      value = local.service_name
    },
    {% if database == "shared-rds" %}
    {
      name  = "DB_HOST"
      value = local.db_address
    },
    {
      name  = "DB_PORT"
      value = tostring(local.db_port)
    },
    {% endif %}
    {% if cache == "shared-elasticache" %}
    {
      name  = "REDIS_ENDPOINT"
      value = local.redis_endpoint
    },
    {% endif %}
  ]

  # Secrets (injected at runtime)
  container_secrets = [
    {% if database == "shared-rds" %}
    {
      name      = "DB_PASSWORD"
      valueFrom = data.aws_ssm_parameter.master_password_secret_name.value
    },
    {% endif %}
  ]

  depends_on = [
    module.{{ service_name | replace('-', '_') }}_logs,
    aws_iam_role_policy_attachment.{{ service_name | replace('-', '_') }}_execution_role_policy
  ]
}
