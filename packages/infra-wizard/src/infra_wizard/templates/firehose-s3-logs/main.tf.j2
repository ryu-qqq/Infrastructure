# ============================================================================
# {{ service_name | upper }} - CloudWatch Logs to S3 via Firehose
# ============================================================================
# Generated by Infrastructure Wizard
# Service: {{ service_name }}
# Environment: {{ environment }}
# ============================================================================

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "{{ aws_region }}"
}

variable "environment" {
  description = "Environment (dev/staging/prod)"
  type        = string
  default     = "{{ environment }}"
}

variable "service_name" {
  description = "Service name"
  type        = string
  default     = "{{ service_name }}"
}

{% if create_s3_bucket %}
# ============================================================================
# S3 Bucket for Log Storage
# ============================================================================

# KMS Key for S3 encryption
resource "aws_kms_key" "logs" {
  description             = "KMS key for ${local.s3_bucket_name} log storage"
  enable_key_rotation     = true
  deletion_window_in_days = 30

  tags = merge(
    local.required_tags,
    {
      Name      = "kms-${local.s3_bucket_name}"
      Component = "encryption"
    }
  )
}

resource "aws_kms_alias" "logs" {
  name          = "alias/${local.s3_bucket_name}"
  target_key_id = aws_kms_key.logs.key_id
}

# S3 Bucket
resource "aws_s3_bucket" "logs" {
  bucket = local.s3_bucket_name

  tags = merge(
    local.required_tags,
    {
      Name      = local.s3_bucket_name
      Component = "storage"
    }
  )
}

# Bucket versioning
resource "aws_s3_bucket_versioning" "logs" {
  bucket = aws_s3_bucket.logs.id

  versioning_configuration {
    status = "Enabled"
  }
}

# Server-side encryption
resource "aws_s3_bucket_server_side_encryption_configuration" "logs" {
  bucket = aws_s3_bucket.logs.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = "aws:kms"
      kms_master_key_id = aws_kms_key.logs.arn
    }
    bucket_key_enabled = true
  }
}

# Public access block
resource "aws_s3_bucket_public_access_block" "logs" {
  bucket = aws_s3_bucket.logs.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Lifecycle policy
resource "aws_s3_bucket_lifecycle_configuration" "logs" {
  bucket = aws_s3_bucket.logs.id

  rule {
    id     = "transition-to-ia"
    status = "Enabled"

    transition {
      days          = 30
      storage_class = "STANDARD_IA"
    }

    transition {
      days          = 90
      storage_class = "GLACIER_IR"
    }

    transition {
      days          = 180
      storage_class = "DEEP_ARCHIVE"
    }

    {% if log_retention_days %}
    expiration {
      days = {{ log_retention_days }}
    }
    {% endif %}
  }

  rule {
    id     = "delete-old-versions"
    status = "Enabled"

    noncurrent_version_expiration {
      noncurrent_days = 30
    }
  }
}
{% endif %}

# ============================================================================
# IAM Role for Firehose
# ============================================================================

# IAM role for Firehose
resource "aws_iam_role" "firehose" {
  name_prefix = "${local.firehose_name}-"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "firehose.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-role"
      Component = "iam"
    }
  )
}

# IAM policy for Firehose
resource "aws_iam_role_policy" "firehose" {
  name_prefix = "${local.firehose_name}-"
  role        = aws_iam_role.firehose.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket"
        ]
        Resource = [
          {% if create_s3_bucket %}
          aws_s3_bucket.logs.arn,
          "${aws_s3_bucket.logs.arn}/*"
          {% else %}
          data.aws_s3_bucket.logs.arn,
          "${data.aws_s3_bucket.logs.arn}/*"
          {% endif %}
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ]
        Resource = [
          {% if create_s3_bucket %}
          aws_kms_key.logs.arn
          {% else %}
          data.aws_kms_key.s3.arn
          {% endif %}
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "logs:PutLogEvents"
        ]
        Resource = [
          aws_cloudwatch_log_group.firehose.arn
        ]
      }
    ]
  })
}

# ============================================================================
# CloudWatch Log Group for Source Logs
# ============================================================================

resource "aws_cloudwatch_log_group" "source" {
  name              = local.log_group_name
  retention_in_days = {{ cloudwatch_retention | default(7) }}

  tags = merge(
    local.required_tags,
    {
      Name      = local.log_group_name
      Component = "logs"
    }
  )
}

# ============================================================================
# CloudWatch Log Group for Firehose Delivery Logs
# ============================================================================

resource "aws_cloudwatch_log_group" "firehose" {
  name              = "/aws/kinesisfirehose/${local.firehose_name}"
  retention_in_days = 7

  tags = merge(
    local.required_tags,
    {
      Name      = "/aws/kinesisfirehose/${local.firehose_name}"
      Component = "logs"
    }
  )
}

resource "aws_cloudwatch_log_stream" "firehose_s3" {
  name           = "S3Delivery"
  log_group_name = aws_cloudwatch_log_group.firehose.name
}

resource "aws_cloudwatch_log_stream" "firehose_backup" {
  name           = "BackupDelivery"
  log_group_name = aws_cloudwatch_log_group.firehose.name
}

# ============================================================================
# Kinesis Firehose Delivery Stream
# ============================================================================

resource "aws_kinesis_firehose_delivery_stream" "logs" {
  name        = local.firehose_name
  destination = "extended_s3"

  extended_s3_configuration {
    role_arn            = aws_iam_role.firehose.arn
    {% if create_s3_bucket %}
    bucket_arn          = aws_s3_bucket.logs.arn
    {% else %}
    bucket_arn          = data.aws_s3_bucket.logs.arn
    {% endif %}
    prefix              = "logs/${var.service_name}/${var.environment}/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/"
    error_output_prefix = "errors/${var.service_name}/${var.environment}/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/"

    buffering_size     = {{ buffer_size | default(5) }}
    buffering_interval = {{ buffer_interval | default(300) }}
    compression_format = "GZIP"

    cloudwatch_logging_options {
      enabled         = true
      log_group_name  = aws_cloudwatch_log_group.firehose.name
      log_stream_name = aws_cloudwatch_log_stream.firehose_s3.name
    }

    {% if create_s3_bucket %}
    s3_backup_mode = "Disabled"
    {% else %}
    # Backup failed records only
    s3_backup_mode = "Enabled"
    s3_backup_configuration {
      role_arn   = aws_iam_role.firehose.arn
      bucket_arn = data.aws_s3_bucket.logs.arn
      prefix     = "backup/${var.service_name}/${var.environment}/"

      cloudwatch_logging_options {
        enabled         = true
        log_group_name  = aws_cloudwatch_log_group.firehose.name
        log_stream_name = aws_cloudwatch_log_stream.firehose_backup.name
      }
    }
    {% endif %}
  }

  tags = merge(
    local.required_tags,
    {
      Name      = local.firehose_name
      Component = "firehose"
    }
  )
}

# ============================================================================
# IAM Role for CloudWatch Logs Subscription
# ============================================================================

resource "aws_iam_role" "cloudwatch_logs" {
  name_prefix = "${local.name_prefix}-cwl-to-fh-"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "logs.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-cwl-role"
      Component = "iam"
    }
  )
}

resource "aws_iam_role_policy" "cloudwatch_logs" {
  name_prefix = "${local.name_prefix}-cwl-policy-"
  role        = aws_iam_role.cloudwatch_logs.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ]
        Resource = [
          aws_kinesis_firehose_delivery_stream.logs.arn
        ]
      }
    ]
  })
}

# ============================================================================
# CloudWatch Logs Subscription Filter
# ============================================================================

resource "aws_cloudwatch_log_subscription_filter" "firehose" {
  name            = "${local.name_prefix}-to-firehose"
  log_group_name  = aws_cloudwatch_log_group.source.name
  filter_pattern  = "{{ filter_pattern | default('') }}"
  destination_arn = aws_kinesis_firehose_delivery_stream.logs.arn
  role_arn        = aws_iam_role.cloudwatch_logs.arn

  depends_on = [
    aws_iam_role_policy.cloudwatch_logs
  ]
}

# ============================================================================
# CloudWatch Alarms
# ============================================================================

resource "aws_cloudwatch_metric_alarm" "firehose_delivery_to_s3_records" {
  alarm_name          = "${local.firehose_name}-low-delivery-rate"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = 2
  metric_name         = "DeliveryToS3.Records"
  namespace           = "AWS/Firehose"
  period              = 300
  statistic           = "Sum"
  threshold           = 1
  alarm_description   = "Firehose delivery rate is low"
  treat_missing_data  = "notBreaching"

  dimensions = {
    DeliveryStreamName = aws_kinesis_firehose_delivery_stream.logs.name
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-delivery-alarm"
      Component = "monitoring"
    }
  )
}

resource "aws_cloudwatch_metric_alarm" "firehose_delivery_to_s3_success" {
  alarm_name          = "${local.firehose_name}-delivery-failure"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = 1
  metric_name         = "DeliveryToS3.Success"
  namespace           = "AWS/Firehose"
  period              = 300
  statistic           = "Average"
  threshold           = 1
  alarm_description   = "Firehose delivery to S3 is failing"
  treat_missing_data  = "notBreaching"

  dimensions = {
    DeliveryStreamName = aws_kinesis_firehose_delivery_stream.logs.name
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-success-alarm"
      Component = "monitoring"
    }
  )
}

# ============================================================================
# SSM Parameters
# ============================================================================

resource "aws_ssm_parameter" "firehose_name" {
  name        = "/${local.name_prefix}/firehose/stream-name"
  description = "Firehose delivery stream name for {{ service_name }}"
  type        = "String"
  value       = aws_kinesis_firehose_delivery_stream.logs.name

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-name-param"
      Component = "parameters"
    }
  )
}

resource "aws_ssm_parameter" "s3_bucket" {
  name        = "/${local.name_prefix}/firehose/s3-bucket"
  description = "S3 bucket for archived logs"
  type        = "String"
  value       = local.s3_bucket_name

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-bucket-param"
      Component = "parameters"
    }
  )
}

resource "aws_ssm_parameter" "log_group" {
  name        = "/${local.name_prefix}/firehose/log-group"
  description = "CloudWatch log group name"
  type        = "String"
  value       = aws_cloudwatch_log_group.source.name

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.firehose_name}-loggroup-param"
      Component = "parameters"
    }
  )
}
