# {{ service_name | upper }} - RDS MySQL Database

Generated by Infrastructure Wizard on {{ generation_time }}

## Overview

This Terraform configuration creates an RDS MySQL 8.0 database instance for {{ service_name }}.

## Resources Created

- RDS MySQL {{ engine_version | default('8.0.35') }} instance
- DB subnet group
- Security group for database access (port 3306)
- Secrets Manager secret for database password
- SSM parameters for connection info

## Configuration

### Instance Details
- **Engine**: MySQL 8.0.35
- **Instance Class**: {{ instance_class | default('db.t3.micro') }}
- **Allocated Storage**: {{ allocated_storage | default(20) }} GB
- **Multi-AZ**: {% if multi_az is defined %}{{ multi_az }}{% else %}Enabled{% endif %}
- **Storage Encryption**: {% if storage_encrypted is defined %}{{ storage_encrypted }}{% else %}Enabled{% endif %}

### Backup Configuration
- **Backup Retention**: {{ backup_retention | default(7) }} days
- **Backup Window**: 03:00-04:00 UTC
- **Maintenance Window**: Monday 04:00-05:00 UTC

### Monitoring
- **Performance Insights**: {% if performance_insights is defined %}{{ performance_insights }}{% else %}Enabled{% endif %}
- **CloudWatch Logs**: Error, General, Slow Query logs enabled
- **Enhanced Monitoring**: 60 second interval

## Database Credentials

**Username**: Stored in SSM Parameter Store at `/${local.name_prefix}/rds/username`
**Password**: Stored in AWS Secrets Manager (auto-generated 32 character password)

## Connection Information

Access connection details from SSM Parameter Store:

```bash
# Get database endpoint
aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/endpoint" --query 'Parameter.Value' --output text

# Get database name
aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/database-name" --query 'Parameter.Value' --output text

# Get database password from Secrets Manager
aws secretsmanager get-secret-value --secret-id {{ service_name }}-{{ environment }}-db-password --query 'SecretString' --output text
```

### MySQL Connection String

```bash
# Build connection string
ENDPOINT=$(aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/endpoint" --query 'Parameter.Value' --output text)
DB_NAME=$(aws ssm get-parameter --name "/{{ service_name }}-{{ environment }}/rds/database-name" --query 'Parameter.Value' --output text)
PASSWORD=$(aws secretsmanager get-secret-value --secret-id {{ service_name }}-{{ environment }}-db-password --query 'SecretString' --output text)

# Connect using mysql client
mysql -h $ENDPOINT -u {{ db_username | default('dbadmin') }} -p$PASSWORD $DB_NAME
```

## Usage

### Initialize Terraform

```bash
terraform init
```

### Plan Changes

```bash
terraform plan
```

### Apply Changes

```bash
terraform apply
```

## Security Features

- âœ… Storage encryption using KMS
- âœ… Secrets Manager for password storage
- âœ… Restricted security group access (port 3306)
- âœ… Private subnet placement
- âœ… SSL/TLS connections enforced
- âœ… Automated backups enabled

## Monitoring

CloudWatch metrics are automatically collected:
- CPU utilization
- Database connections
- Free storage space
- Read/Write IOPS
- Database latency
- Slow queries

## MySQL-Specific Configuration

### Character Set and Collation
Default configuration uses:
- **Character Set**: utf8mb4 (full Unicode support)
- **Collation**: utf8mb4_unicode_ci

### InnoDB Configuration
Optimized for:
- Buffer pool size (auto-managed by RDS)
- Log file size for performance
- Flush method for durability

### Slow Query Logging
Enabled with threshold:
- Queries > 2 seconds logged to CloudWatch
- Available for analysis in CloudWatch Logs Insights

## Backup and Recovery

- Automated daily backups
- {{ backup_retention | default(7) }}-day retention period
- Point-in-time recovery enabled
- Final snapshot on deletion

## Cost Optimization

- Right-sized instance class
- GP3 storage for cost-efficiency
- Automated storage scaling
- Reserved Instance compatible

## MySQL 8.0 Features

- JSON data type support
- Common Table Expressions (CTEs)
- Window functions
- Improved performance schema
- UTF-8 by default (utf8mb4)

## Application Connection Pooling

Recommended connection pool settings:
- **Min connections**: 5
- **Max connections**: 20 (adjust based on instance class)
- **Connection timeout**: 30 seconds
- **Idle timeout**: 600 seconds

## Common Operations

### Create Database User

```sql
CREATE USER 'app_user'@'%' IDENTIFIED BY 'secure_password';
GRANT SELECT, INSERT, UPDATE, DELETE ON {{ db_name | default('appdb') }}.* TO 'app_user'@'%';
FLUSH PRIVILEGES;
```

### Check Slow Queries

```sql
-- Enable slow query log
SET GLOBAL slow_query_log = 'ON';
SET GLOBAL long_query_time = 2;

-- View slow query log
SELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;
```

### Database Size

```sql
SELECT
  table_schema AS 'Database',
  ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'
FROM information_schema.tables
GROUP BY table_schema;
```

## Tags

All resources are tagged with:
- Service: {{ service_name }}
- Environment: {{ environment }}
- ManagedBy: Terraform
- Owner: platform-team
- CostCenter: engineering

## Next Steps

1. Verify database connectivity from application
2. Configure database users and permissions
3. Set up monitoring alerts
4. Review and adjust parameter group settings
5. Configure application connection pooling
6. Enable and review slow query logs

## Support

For issues or questions, contact the platform team.

---

ðŸ¤– Generated with Infrastructure Wizard
