# {{ service_name | upper }} - Lambda Function

Generated by Infrastructure Wizard on {{ generation_time }}

## Overview

AWS Lambda function for {{ service_name }} with {{ runtime | default('python3.11') }} runtime.

## Resources Created

- Lambda function with {{ memory_size | default(512) }}MB memory
- IAM role and policies
- CloudWatch log group
{% if api_gateway %}- API Gateway HTTP API{% endif %}
{% if eventbridge %}- EventBridge schedule rule{% endif %}
{% if vpc_config %}- VPC configuration with security group{% endif %}

## Configuration

- **Runtime**: {{ runtime | default('python3.11') }}
- **Memory**: {{ memory_size | default(512) }} MB
- **Timeout**: {{ timeout | default(30) }} seconds
{% if reserved_concurrency and reserved_concurrency > 0 %}- **Reserved Concurrency**: {{ reserved_concurrency }}{% endif %}

{% if api_gateway %}
## API Endpoint

Access your Lambda function via HTTP API:

```bash
curl https://{{'{{'}}api_endpoint{{'}}'}}/hello
```
{% endif %}

## Deployment

1. Add your function code to `src/` directory
2. Initialize Terraform: `terraform init`
3. Plan changes: `terraform plan`
4. Apply: `terraform apply`

## Testing

Test your Lambda function:

```bash
aws lambda invoke --function-name {{ service_name }}-{{ environment }} response.json
cat response.json
```

---

ðŸ¤– Generated with Infrastructure Wizard
