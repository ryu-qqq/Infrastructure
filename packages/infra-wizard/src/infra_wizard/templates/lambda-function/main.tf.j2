# ============================================================================
# {{ service_name | upper }} - Lambda Function
# ============================================================================
# Generated by Infrastructure Wizard
# Service: {{ service_name }}
# Environment: {{ environment }}
# Runtime: {{ runtime | default('python3.11') }}
# ============================================================================

# IAM Role for Lambda
resource "aws_iam_role" "{{ service_name | replace('-', '_') }}_lambda" {
  name_prefix = "${local.name_prefix}-lambda-"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-lambda-role"
      Component = "iam"
    }
  )
}

# Attach basic Lambda execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.{{ service_name | replace('-', '_') }}_lambda.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

{% if vpc_config %}
# Attach VPC execution policy
resource "aws_iam_role_policy_attachment" "lambda_vpc" {
  role       = aws_iam_role.{{ service_name | replace('-', '_') }}_lambda.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}
{% endif %}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "{{ service_name | replace('-', '_') }}_lambda" {
  name              = "/aws/lambda/${local.name_prefix}"
  retention_in_days = 14
  kms_key_id        = data.aws_kms_key.cloudwatch_logs.arn

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-lambda-logs"
      Component = "logging"
    }
  )
}

# Lambda Function
module "{{ service_name | replace('-', '_') }}_lambda" {
  source = "../../modules/lambda"

  function_name = local.name_prefix
  description   = "{{ service_name }} Lambda function"
  handler       = "index.handler"
  runtime       = "{{ runtime | default('python3.11') }}"

  # Code
  source_path = "${path.module}/src"

  # Configuration
  memory_size = {{ memory_size | default(512) }}
  timeout     = {{ timeout | default(30) }}
  {% if reserved_concurrency and reserved_concurrency > 0 %}
  reserved_concurrent_executions = {{ reserved_concurrency }}
  {% endif %}

  # IAM
  create_role = false
  lambda_role = aws_iam_role.{{ service_name | replace('-', '_') }}_lambda.arn

  # Environment variables
  environment_variables = {
    ENVIRONMENT = "{{ environment }}"
    SERVICE_NAME = "{{ service_name }}"
    LOG_LEVEL = "INFO"
  }

  {% if vpc_config %}
  # VPC Configuration
  vpc_subnet_ids         = data.aws_subnets.private.ids
  vpc_security_group_ids = [aws_security_group.{{ service_name | replace('-', '_') }}_lambda.id]
  {% endif %}

  # CloudWatch Logs
  cloudwatch_logs_retention_in_days = 14
  cloudwatch_logs_kms_key_id       = data.aws_kms_key.cloudwatch_logs.arn

  # Tracing
  tracing_mode = "Active"

  tags = local.required_tags
}

{% if vpc_config %}
# Security Group for Lambda (VPC)
resource "aws_security_group" "{{ service_name | replace('-', '_') }}_lambda" {
  name_prefix = "${local.name_prefix}-lambda-"
  description = "Security group for {{ service_name }} Lambda function"
  vpc_id      = data.aws_vpc.main.id

  egress {
    description = "Allow all outbound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-lambda-sg"
      Component = "security"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}
{% endif %}

{% if api_gateway %}
# API Gateway for Lambda
resource "aws_apigatewayv2_api" "{{ service_name | replace('-', '_') }}" {
  name          = local.name_prefix
  protocol_type = "HTTP"
  description   = "HTTP API for {{ service_name }}"

  cors_configuration {
    allow_origins = ["*"]
    allow_methods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allow_headers = ["*"]
    max_age       = 300
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-api"
      Component = "api-gateway"
    }
  )
}

# API Gateway Integration
resource "aws_apigatewayv2_integration" "{{ service_name | replace('-', '_') }}" {
  api_id           = aws_apigatewayv2_api.{{ service_name | replace('-', '_') }}.id
  integration_type = "AWS_PROXY"

  integration_uri    = module.{{ service_name | replace('-', '_') }}_lambda.function_arn
  integration_method = "POST"
}

# API Gateway Route
resource "aws_apigatewayv2_route" "{{ service_name | replace('-', '_') }}" {
  api_id    = aws_apigatewayv2_api.{{ service_name | replace('-', '_') }}.id
  route_key = "ANY /{proxy+}"
  target    = "integrations/${aws_apigatewayv2_integration.{{ service_name | replace('-', '_') }}.id}"
}

# API Gateway Stage
resource "aws_apigatewayv2_stage" "{{ service_name | replace('-', '_') }}" {
  api_id      = aws_apigatewayv2_api.{{ service_name | replace('-', '_') }}.id
  name        = "{{ environment }}"
  auto_deploy = true

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.{{ service_name | replace('-', '_') }}_api.arn
    format = jsonencode({
      requestId      = "$context.requestId"
      ip             = "$context.identity.sourceIp"
      requestTime    = "$context.requestTime"
      httpMethod     = "$context.httpMethod"
      routeKey       = "$context.routeKey"
      status         = "$context.status"
      protocol       = "$context.protocol"
      responseLength = "$context.responseLength"
    })
  }

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-api-stage"
      Component = "api-gateway"
    }
  )
}

# CloudWatch Log Group for API Gateway
resource "aws_cloudwatch_log_group" "{{ service_name | replace('-', '_') }}_api" {
  name              = "/aws/apigateway/${local.name_prefix}"
  retention_in_days = 14
  kms_key_id        = data.aws_kms_key.cloudwatch_logs.arn

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-api-logs"
      Component = "logging"
    }
  )
}

# Lambda permission for API Gateway
resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = module.{{ service_name | replace('-', '_') }}_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.{{ service_name | replace('-', '_') }}.execution_arn}/*/*"
}
{% endif %}

{% if eventbridge %}
# EventBridge Rule for scheduled execution
resource "aws_cloudwatch_event_rule" "{{ service_name | replace('-', '_') }}_schedule" {
  name_prefix         = "${local.name_prefix}-schedule-"
  description         = "Schedule for {{ service_name }} Lambda"
  schedule_expression = "rate(5 minutes)"  # Adjust as needed

  tags = merge(
    local.required_tags,
    {
      Name      = "${local.name_prefix}-schedule"
      Component = "eventbridge"
    }
  )
}

# EventBridge Target
resource "aws_cloudwatch_event_target" "{{ service_name | replace('-', '_') }}_lambda" {
  rule      = aws_cloudwatch_event_rule.{{ service_name | replace('-', '_') }}_schedule.name
  target_id = "lambda"
  arn       = module.{{ service_name | replace('-', '_') }}_lambda.function_arn
}

# Lambda permission for EventBridge
resource "aws_lambda_permission" "eventbridge" {
  statement_id  = "AllowEventBridgeInvoke"
  action        = "lambda:InvokeFunction"
  function_name = module.{{ service_name | replace('-', '_') }}_lambda.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.{{ service_name | replace('-', '_') }}_schedule.arn
}
{% endif %}
