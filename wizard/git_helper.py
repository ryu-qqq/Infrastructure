"""
Git Helper Module

Handles Git operations for Infrastructure Wizard.
"""

import subprocess
from pathlib import Path
from typing import Optional, List
from datetime import datetime

from rich.console import Console

console = Console()


class GitHelper:
    """Git operations helper for Infrastructure Wizard."""

    def __init__(self, repo_root: Path):
        """
        Initialize Git helper.

        Args:
            repo_root: Path to Git repository root
        """
        self.repo_root = repo_root

    def run_git_command(self, args: List[str], check: bool = True) -> subprocess.CompletedProcess:
        """
        Run a Git command.

        Args:
            args: Git command arguments
            check: Whether to raise exception on non-zero exit

        Returns:
            CompletedProcess with stdout/stderr
        """
        cmd = ['git'] + args
        return subprocess.run(
            cmd,
            cwd=self.repo_root,
            capture_output=True,
            text=True,
            check=check
        )

    def get_current_branch(self) -> str:
        """
        Get current Git branch name.

        Returns:
            Current branch name
        """
        result = self.run_git_command(['branch', '--show-current'])
        return result.stdout.strip()

    def create_feature_branch(self, service_name: str) -> str:
        """
        Create and checkout a new feature branch.

        Args:
            service_name: Service name for branch naming

        Returns:
            Created branch name
        """
        timestamp = datetime.now().strftime('%Y%m%d')
        branch_name = f"feature/wizard-{service_name}-{timestamp}"

        console.print(f"\n[bold]🔀 Git 브랜치 생성 중...[/bold]")

        # Create and checkout branch
        self.run_git_command(['checkout', '-b', branch_name])

        console.print(f"[green]✅ 브랜치 생성 완료: {branch_name}[/green]")
        return branch_name

    def stage_files(self, files: List[Path]) -> None:
        """
        Stage files for commit.

        Args:
            files: List of file paths to stage
        """
        console.print(f"\n[bold]📦 파일 스테이징 중...[/bold]")

        for file_path in files:
            # Convert to relative path from repo root
            relative_path = file_path.relative_to(self.repo_root)
            self.run_git_command(['add', str(relative_path)])
            console.print(f"   ✅ {relative_path}")

    def create_commit(
        self,
        service_name: str,
        service_dir: str,
        components: dict,
        dry_run: bool = False
    ) -> None:
        """
        Create a commit with wizard-generated changes.

        Args:
            service_name: Service name
            service_dir: Service directory path
            components: Selected components
            dry_run: If True, don't create commit
        """
        console.print(f"\n[bold]💾 Git 커밋 생성 중...[/bold]")

        # Generate commit message
        commit_msg = self._generate_commit_message(service_name, service_dir, components)

        if dry_run:
            console.print(f"[yellow]🔍 Dry-run 모드: 커밋하지 않았습니다[/yellow]")
            console.print(f"\n생성될 커밋 메시지:")
            console.print(f"[dim]{commit_msg}[/dim]")
            return

        # Create commit
        self.run_git_command(['commit', '-m', commit_msg])
        console.print(f"[green]✅ 커밋 생성 완료[/green]")

    def _generate_commit_message(
        self,
        service_name: str,
        service_dir: str,
        components: dict
    ) -> str:
        """
        Generate conventional commit message.

        Args:
            service_name: Service name
            service_dir: Service directory
            components: Selected components

        Returns:
            Formatted commit message
        """
        # Build component summary
        component_lines = []

        if components.get('database'):
            db_type = components['database']
            component_lines.append(f"  - Database: {db_type}")

        if components.get('cache'):
            cache_type = components['cache']
            component_lines.append(f"  - Cache: {cache_type}")

        if components.get('load_balancer'):
            component_lines.append("  - Load Balancer: ALB")

        components_text = "\n".join(component_lines) if component_lines else "  - No optional components"

        commit_msg = f"""feat: Add {service_name} service infrastructure

Generated by Infrastructure Wizard

Service Configuration:
  - Name: {service_name}
  - Directory: {service_dir}

Components:
{components_text}

Auto-generated files:
  - Terraform configurations (main.tf, variables.tf, outputs.tf)
  - Provider and backend configuration
  - Service-specific resources
  - atlantis.yaml project registration

🤖 Generated with Infrastructure Wizard
"""
        return commit_msg

    def check_repo_clean(self) -> bool:
        """
        Check if repository has uncommitted changes.

        Returns:
            True if repo is clean (no changes)
        """
        result = self.run_git_command(['status', '--porcelain'])
        return len(result.stdout.strip()) == 0

    def get_changed_files(self) -> List[str]:
        """
        Get list of changed files.

        Returns:
            List of changed file paths
        """
        result = self.run_git_command(['status', '--porcelain'])

        changed_files = []
        for line in result.stdout.strip().split('\n'):
            if line:
                # Parse git status output (e.g., "M  file.txt")
                status, filepath = line[:2], line[3:]
                changed_files.append(filepath)

        return changed_files

    def create_pr_with_gh(
        self,
        service_name: str,
        components: dict,
        base_branch: str = "main",
        dry_run: bool = False
    ) -> Optional[str]:
        """
        Create GitHub PR using gh CLI.

        Args:
            service_name: Service name
            components: Selected components
            base_branch: Base branch for PR (default: main)
            dry_run: If True, don't create PR

        Returns:
            PR URL if created, None if dry-run
        """
        console.print(f"\n[bold]🚀 GitHub PR 생성 중...[/bold]")

        # Check if gh CLI is available
        try:
            subprocess.run(['gh', '--version'], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            console.print("[red]❌ GitHub CLI (gh)가 설치되지 않았습니다[/red]")
            console.print("[yellow]설치: brew install gh[/yellow]")
            return None

        # Generate PR title and body
        title = f"feat: Add {service_name} service infrastructure"
        body = self._generate_pr_body(service_name, components)

        if dry_run:
            console.print(f"[yellow]🔍 Dry-run 모드: PR을 생성하지 않았습니다[/yellow]")
            console.print(f"\nPR 제목: {title}")
            console.print(f"\nPR 본문:\n{body}")
            return None

        # Create PR using gh CLI
        try:
            result = subprocess.run(
                ['gh', 'pr', 'create', '--title', title, '--body', body, '--base', base_branch],
                cwd=self.repo_root,
                capture_output=True,
                text=True,
                check=True
            )

            pr_url = result.stdout.strip()
            console.print(f"[green]✅ PR 생성 완료![/green]")
            console.print(f"\n[bold cyan]PR URL: {pr_url}[/bold cyan]")

            return pr_url

        except subprocess.CalledProcessError as e:
            console.print(f"[red]❌ PR 생성 실패: {e.stderr}[/red]")
            return None

    def _generate_pr_body(self, service_name: str, components: dict) -> str:
        """
        Generate PR description body.

        Args:
            service_name: Service name
            components: Selected components

        Returns:
            Formatted PR body
        """
        # Build component list
        component_items = []

        if components.get('database'):
            db_type = components['database']
            component_items.append(f"- **Database**: {db_type}")

        if components.get('cache'):
            cache_type = components['cache']
            component_items.append(f"- **Cache**: {cache_type}")

        if components.get('load_balancer'):
            component_items.append("- **Load Balancer**: ALB")

        components_section = "\n".join(component_items) if component_items else "- No optional components"

        pr_body = f"""## 📋 Summary

New service infrastructure generated by Infrastructure Wizard.

## 🎯 Service: {service_name}

### Components
{components_section}

## 📦 What's Included

- ✅ Terraform configurations (ECS Service, Security Groups)
- ✅ Provider and backend configuration
- ✅ Required tags and KMS encryption
- ✅ atlantis.yaml project registration
- ✅ Service-specific documentation

## 🔍 Atlantis Plan

Atlantis will automatically run `terraform plan` and post results as a comment.

**Expected Atlantis comment in ~1-2 minutes**

## ✅ Checklist

- [ ] Review Atlantis plan output
- [ ] Verify resource configurations
- [ ] Check security group rules
- [ ] Validate tags and encryption settings
- [ ] Approve PR
- [ ] Merge → Atlantis will auto-apply

## 🤖 Generated

This PR was automatically generated by Infrastructure Wizard.

---

**Next Steps:**
1. Wait for Atlantis plan comment
2. Review plan output carefully
3. Approve and merge when ready
4. Atlantis will automatically apply changes
"""
        return pr_body
