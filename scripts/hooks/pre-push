#!/bin/bash
#
# pre-push - Git Pre-Push Hook for Terraform
#
# Comprehensive validation before push:
#   1. All validator scripts (tags, encryption, naming)
#   2. Terraform validate
#   3. Optional: tfsec security scan (if installed)
#
# Installation:
#   Run: ./scripts/setup-hooks.sh
#
# Bypass (emergency only):
#   git push --no-verify
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}════════════════════════════════════════${NC}"
echo -e "${BLUE}🚀 Running pre-push validation...${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}\n"

# Get the root directory of the git repository
GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

ERRORS=0
WARNINGS=0

# Check if terraform is installed
if ! command -v terraform >/dev/null 2>&1; then
    echo -e "${RED}✗ Error: Terraform not installed${NC}"
    echo -e "${YELLOW}💡 Install: https://www.terraform.io/downloads${NC}"
    exit 1
fi

# Find all terraform directories
TERRAFORM_DIRS=$(find . -name "*.tf" -type f -exec dirname {} \; | sort -u | grep -v ".terraform")

if [[ -z "$TERRAFORM_DIRS" ]]; then
    echo -e "${YELLOW}⚠ No Terraform files found${NC}"
    exit 0
fi

# Run governance validators
echo -e "${BLUE}📋 Running governance validators...${NC}\n"

# 1. Check tags
if [[ -x "./scripts/validators/check-tags.sh" ]]; then
    echo -e "${BLUE}🏷️  Checking required tags...${NC}"
    if ./scripts/validators/check-tags.sh; then
        echo -e "${GREEN}✓ Tags validation passed${NC}\n"
    else
        echo -e "${RED}✗ Tags validation failed${NC}\n"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}⚠ check-tags.sh not found or not executable${NC}\n"
    ((WARNINGS++))
fi

# 2. Check encryption
if [[ -x "./scripts/validators/check-encryption.sh" ]]; then
    echo -e "${BLUE}🔒 Checking KMS encryption...${NC}"
    if ./scripts/validators/check-encryption.sh; then
        echo -e "${GREEN}✓ Encryption validation passed${NC}\n"
    else
        echo -e "${RED}✗ Encryption validation failed${NC}\n"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}⚠ check-encryption.sh not found or not executable${NC}\n"
    ((WARNINGS++))
fi

# 3. Check naming conventions
if [[ -x "./scripts/validators/check-naming.sh" ]]; then
    echo -e "${BLUE}📝 Checking naming conventions...${NC}"
    if ./scripts/validators/check-naming.sh; then
        echo -e "${GREEN}✓ Naming validation passed${NC}\n"
    else
        echo -e "${RED}✗ Naming validation failed${NC}\n"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}⚠ check-naming.sh not found or not executable${NC}\n"
    ((WARNINGS++))
fi

# Terraform validate for all directories
echo -e "${BLUE}✅ Running terraform validate...${NC}\n"

for dir in $TERRAFORM_DIRS; do
    if [[ -f "$dir/provider.tf" ]] || [[ -f "$dir/main.tf" ]] || [[ -f "$dir/versions.tf" ]]; then
        echo -e "${BLUE}Validating: $dir${NC}"

        # Check if .terraform directory exists
        if [[ ! -d "$dir/.terraform" ]]; then
            echo -e "${YELLOW}⚠ Terraform not initialized in $dir${NC}"
            echo -e "${YELLOW}💡 Initializing...${NC}"

            if terraform -chdir="$dir" init -backend=false >/dev/null 2>&1; then
                echo -e "${GREEN}✓ Initialized${NC}"
            else
                echo -e "${RED}✗ Failed to initialize $dir${NC}"
                ((ERRORS++))
                continue
            fi
        fi

        # Run terraform validate
        if terraform -chdir="$dir" validate >/dev/null 2>&1; then
            echo -e "${GREEN}✓ $dir is valid${NC}"
        else
            echo -e "${RED}✗ Validation failed: $dir${NC}"
            terraform -chdir="$dir" validate
            ((ERRORS++))
        fi
    fi
done

# Optional: tfsec security scan
echo -e "\n${BLUE}🛡️  Security scan (optional)...${NC}"
if command -v tfsec >/dev/null 2>&1; then
    echo -e "${BLUE}Running tfsec...${NC}"

    if tfsec . --soft-fail 2>/dev/null; then
        echo -e "${GREEN}✓ tfsec scan completed${NC}"
    else
        echo -e "${YELLOW}⚠ tfsec found issues (warnings only)${NC}"
        ((WARNINGS++))
    fi
else
    echo -e "${YELLOW}ℹ tfsec not installed (optional)${NC}"
    echo -e "${YELLOW}💡 Install: https://github.com/aquasecurity/tfsec${NC}"
fi

# Optional: checkov security scan
echo -e "\n${BLUE}🔍 Policy scan (optional)...${NC}"
if command -v checkov >/dev/null 2>&1; then
    echo -e "${BLUE}Running checkov...${NC}"

    if checkov -d . --quiet --compact 2>/dev/null; then
        echo -e "${GREEN}✓ checkov scan completed${NC}"
    else
        echo -e "${YELLOW}⚠ checkov found issues (warnings only)${NC}"
        ((WARNINGS++))
    fi
else
    echo -e "${YELLOW}ℹ checkov not installed (optional)${NC}"
    echo -e "${YELLOW}💡 Install: pip install checkov${NC}"
fi

# Final summary
echo -e "\n${BLUE}════════════════════════════════════════${NC}"
echo -e "${BLUE}📊 Pre-Push Validation Summary${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"

if [[ $ERRORS -eq 0 && $WARNINGS -eq 0 ]]; then
    echo -e "${GREEN}✓ All validations passed!${NC}"
    echo -e "${GREEN}✓ Safe to push${NC}"
    exit 0
elif [[ $ERRORS -eq 0 ]]; then
    echo -e "${YELLOW}⚠ Warnings: $WARNINGS${NC}"
    echo -e "${GREEN}✓ No critical errors, safe to push${NC}"
    echo -e "${YELLOW}💡 Consider addressing warnings${NC}"
    exit 0
else
    echo -e "${RED}✗ Errors: $ERRORS${NC}"
    echo -e "${YELLOW}⚠ Warnings: $WARNINGS${NC}"
    echo -e "\n${RED}❌ Push blocked due to validation errors${NC}"
    echo -e "${YELLOW}💡 Fix errors above or use: git push --no-verify${NC}"
    echo -e "${YELLOW}⚠  Using --no-verify bypasses governance checks${NC}"
    echo -e "${YELLOW}📖 See: docs/infrastructure_governance.md${NC}"
    exit 1
fi
