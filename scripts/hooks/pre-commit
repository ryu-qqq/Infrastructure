#!/bin/bash
#
# pre-commit - Git Pre-Commit Hook for Terraform
#
# Fast validation before commit:
#   1. Terraform fmt check
#   2. Sensitive information scan
#   3. Basic Terraform validation
#
# Installation:
#   Run: ./scripts/setup-hooks.sh
#
# Bypass (emergency only):
#   git commit --no-verify
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}\n"

# Get the root directory of the git repository
GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

ERRORS=0

# Check if terraform is installed
if ! command -v terraform >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠ Warning: Terraform not found, skipping terraform checks${NC}"
    echo -e "${YELLOW}💡 Install: https://www.terraform.io/downloads${NC}\n"
else
    # Get list of staged .tf files
    STAGED_TF_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.tf$" || true)

    if [[ -n "$STAGED_TF_FILES" ]]; then
        echo -e "${BLUE}📝 Checking Terraform formatting...${NC}"

        # Check terraform fmt
        for file in $STAGED_TF_FILES; do
            if [[ -f "$file" ]]; then
                if ! terraform fmt -check "$file" >/dev/null 2>&1; then
                    echo -e "${YELLOW}⚠ Formatting issue: $file${NC}"
                    echo -e "${YELLOW}💡 Fix with: terraform fmt $file${NC}"

                    # Auto-fix if possible
                    terraform fmt "$file" >/dev/null 2>&1
                    git add "$file"
                    echo -e "${GREEN}✓ Auto-formatted and re-staged: $file${NC}"
                else
                    echo -e "${GREEN}✓ $file${NC}"
                fi
            fi
        done

        echo -e "\n${BLUE}🔒 Scanning for sensitive information...${NC}"

        # Sensitive patterns to check
        SENSITIVE_PATTERNS=(
            "aws_access_key_id"
            "aws_secret_access_key"
            "password\s*=\s*\"[^$]"
            "secret\s*=\s*\"[^$]"
            "api_key\s*=\s*\"[^$]"
            "private_key\s*=\s*\"[^$]"
            "token\s*=\s*\"[^$]"
        )

        for file in $STAGED_TF_FILES; do
            if [[ -f "$file" ]]; then
                for pattern in "${SENSITIVE_PATTERNS[@]}"; do
                    if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
                        echo -e "${RED}✗ Potential sensitive data found in: $file${NC}"
                        echo -e "${RED}  Pattern: $pattern${NC}"
                        echo -e "${YELLOW}💡 Use variables or AWS Secrets Manager instead${NC}"
                        ((ERRORS++))
                    fi
                done
            fi
        done

        if [[ $ERRORS -eq 0 ]]; then
            echo -e "${GREEN}✓ No sensitive information detected${NC}"
        fi

        # Terraform validate for changed directories
        echo -e "\n${BLUE}✅ Running terraform validate...${NC}"

        # Get unique directories from staged files
        TF_DIRS=$(echo "$STAGED_TF_FILES" | xargs -I {} dirname {} | sort -u)

        for dir in $TF_DIRS; do
            if [[ -f "$dir/provider.tf" ]] || [[ -f "$dir/main.tf" ]] || [[ -f "$dir/versions.tf" ]]; then
                echo -e "${BLUE}Validating: $dir${NC}"

                # Check if .terraform directory exists
                if [[ ! -d "$dir/.terraform" ]]; then
                    echo -e "${YELLOW}⚠ Terraform not initialized in $dir, skipping validate${NC}"
                    echo -e "${YELLOW}💡 Run: cd $dir && terraform init${NC}"
                    continue
                fi

                if terraform -chdir="$dir" validate >/dev/null 2>&1; then
                    echo -e "${GREEN}✓ $dir is valid${NC}"
                else
                    echo -e "${RED}✗ Validation failed: $dir${NC}"
                    terraform -chdir="$dir" validate
                    ((ERRORS++))
                fi
            fi
        done
    else
        echo -e "${YELLOW}ℹ No .tf files staged for commit${NC}"
    fi
fi

# Check for common mistakes
echo -e "\n${BLUE}🔍 Checking for common mistakes...${NC}"

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM || true)

for file in $STAGED_FILES; do
    if [[ -f "$file" ]]; then
        # Check for TODO/FIXME in critical files
        if [[ "$file" == *.tf ]] && grep -iE "TODO|FIXME|XXX" "$file" >/dev/null 2>&1; then
            echo -e "${YELLOW}⚠ Found TODO/FIXME in: $file${NC}"
            echo -e "${YELLOW}  Consider resolving before committing${NC}"
        fi

        # Check for hardcoded IPs in terraform files
        if [[ "$file" == *.tf ]] && grep -E "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" "$file" >/dev/null 2>&1; then
            # Exclude common safe patterns (0.0.0.0, 127.0.0.1, etc.)
            if ! grep -E "\b(0\.0\.0\.0|127\.0\.0\.1|255\.255\.255\.[0-9]{1,3})\b" "$file" >/dev/null 2>&1; then
                echo -e "${YELLOW}⚠ Hardcoded IP address found in: $file${NC}"
                echo -e "${YELLOW}  Consider using variables${NC}"
            fi
        fi
    fi
done

# Summary
echo -e "\n${BLUE}════════════════════════════════════════${NC}"
echo -e "${BLUE}📊 Pre-Commit Summary${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"

if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
    echo -e "${YELLOW}💡 Full validation will run on pre-push${NC}"
    exit 0
else
    echo -e "${RED}✗ $ERRORS error(s) found${NC}"
    echo -e "${YELLOW}💡 Fix errors above or use: git commit --no-verify${NC}"
    echo -e "${YELLOW}⚠  Using --no-verify is not recommended${NC}"
    exit 1
fi
